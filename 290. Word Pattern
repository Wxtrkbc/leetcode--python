class Solution(object):
    def wordPattern(self, pattern, str):
        strlist=str.split(' ')
        strdirt={}
        patterndirt={}
        if len(strlist)!=len(pattern):
            return False
        for i in range(len(strlist)):
            if strlist[i] not in strdirt:
                strdirt[strlist[i]]=pattern[i]
            if pattern[i] not in patterndirt:
                patterndirt[pattern[i]]=strlist[i]
            if patterndirt[pattern[i]]!=strlist[i] or strdirt[strlist[i]]!=pattern[i]:
                return False
        return True
'''        
def wordPattern(self, pattern, str):
    s = pattern
    t = str.split()
    return map(s.find, s) == map(t.index, t)
    
def wordPattern(self, pattern, str):
    s = pattern
    t = str.split()
    return len(set(zip(s, t))) == len(set(s)) == len(set(t))
class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        words = str.split()
        if len(pattern) != len(words):
            return False
        ptnDict, wordDict = {}, {}
        for ptn, word in zip(pattern, words):
            if ptn not in ptnDict:
                ptnDict[ptn] = word
            if word not in wordDict:
                wordDict[word] = ptn
            if wordDict[word] != ptn or ptnDict[ptn] != word:
                return False
        return True
'''
